################################################################################
# SETTINGS, FILES, AND DIRECTORIES
################################################################################
# Modules
from os.path import join
from urllib.parse import quote

# wildcard_constraints:
#     cancer_type="Melanoma",
#     seq_type="exome"


# Configuration (default Melanoma)
config['seq_type'] = config.get('seq_type', 'exome')
config['cancer_type'] = config.get('cancer_type', 'Melanoma')
# config['signatures'] = config.get('signatures', [1, 5, 7, 11, 17])

SEQ_TYPE = config['seq_type'] + 's'
QUOTED_CANCER_TYPE = quote(config['cancer_type'])
CANCER_TYPE = config['cancer_type'].replace(' ', '')
if not (config.get('signatures') is None or config.get('signatures') == ''):
    ACTIVE_SIGNATURES = ' '.join([ '"%s"' % s for s in config['signatures']])
else:
    ACTIVE_SIGNATURES = None

# Directories
SRC_DIR = 'src'
DATA_DIR = 'data'
RAW_DIR = join(DATA_DIR, 'raw')
OUTPUT_DIR = 'output'

# Files
COSMIC_SIGNATURES = join(DATA_DIR, 'cosmic-signatures.tsv')

RAW_MUTATION_CATALOGUE = join(RAW_DIR, '%s_%s_mutational_catalog_96_subs.txt' % (CANCER_TYPE, SEQ_TYPE))
MUTATION_CATALOGUE = join(DATA_DIR, 'Alexandrov-et-al-%s-%s.tsv' % (CANCER_TYPE.lower(), SEQ_TYPE))

EXPOSURES = join(OUTPUT_DIR, 'Alexandrov-et-al-{cancer_type}-{seq_type}s-cosmic-exposures.tsv')
BOOTSTRAPPED_EXPOSURES = join(OUTPUT_DIR, 'Alexandrov-et-al-{cancer_type}-{seq_type}s-{sample}-cosmic-exposures-{num_iter}.tsv')
PLOT = join(OUTPUT_DIR, 'Alexandrov-et-al-{cancer_type}-{seq_type}s-cosmic-exposures.pdf')
BOOTSTRAPPED_PLOT = join(OUTPUT_DIR, 'Alexandrov-et-al-{cancer_type}-{seq_type}s-{sample}-cosmic-exposures-{num_iter}.pdf')

# Scripts
PROCESS_ALEXANDROV_DATA_PY = join(SRC_DIR, 'process_alexandrov_et_al_mutations.py')
SIGNATURE_ESTIMATION_PY = join('../', SRC_DIR, 'signature_estimation.py')
BOOTSTRAP_ESTIMATION_PY = join('../', SRC_DIR, 'bootstrap_sig_exposures.py')
PLOT_EXPOSURES_PY = join('../', SRC_DIR, 'plot_exposures.py')

################################################################################
# RULES
################################################################################
# General
rule all:
    input:
        expand(EXPOSURES, seq_type=config["seq_type"], cancer_type=config["cancer_type"])
    params:
        title = "something"
        # title='"{cancer_type} {seq_type}s exposures"'.format(**config)
    output:
        expand(PLOT, seq_type=config["seq_type"], cancer_type=config["cancer_type"])
    shell:
        'python {PLOT_EXPOSURES_PY} -i {input} -o {output} -t {params.title}'

rule bootstrap_A02:
    input:
        expand(BOOTSTRAPPED_PLOT, sample="A02", num_iter=100, seq_type=config["seq_type"], cancer_type=config["cancer_type"])

rule plot_bootstrap_exposures:
    input:
        BOOTSTRAPPED_EXPOSURES
    params:
        title= lambda w: '"exposure confidence intervals in {sample}"'.format(sample=w)
    output:
        BOOTSTRAPPED_PLOT
    shell:
        'python {PLOT_EXPOSURES_PY} -i {input} -o {output} -t {params.title}'

# Example run
rule signature_estimation:
    input:
        signatures=COSMIC_SIGNATURES,
        mutations=MUTATION_CATALOGUE
    params:
        signatures='' if ACTIVE_SIGNATURES is None else '-as ' + ACTIVE_SIGNATURES
    output:
        EXPOSURES
    shell:
        'python {SIGNATURE_ESTIMATION_PY} -mf {input.mutations} '\
        '-sf {input.signatures} {params.signatures} -o {output}'

rule bootstrap_signature_estimation:
    input:
        signatures=COSMIC_SIGNATURES,
        mutations=MUTATION_CATALOGUE
    params:
        signatures='' if ACTIVE_SIGNATURES is None else '-as ' + ACTIVE_SIGNATURES,
    output:
        BOOTSTRAPPED_EXPOSURES
    shell:
        'python {BOOTSTRAP_ESTIMATION_PY} -mf {input.mutations} -ni {wildcards.num_iter} '\
        '-sf {input.signatures} {params.signatures} -o {output} -s {wildcards.sample}'

# Download and process mutations
rule process_mutations:
    input:
        RAW_MUTATION_CATALOGUE
    output:
        MUTATION_CATALOGUE
    shell:
        'python {PROCESS_ALEXANDROV_DATA_PY} -i {input} -o {output}'

rule download_mutations:
    params:
        url='http://ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/%s/%s/%s_%s_mutational_catalog_96_subs.txt' % (SEQ_TYPE, QUOTED_CANCER_TYPE, QUOTED_CANCER_TYPE, SEQ_TYPE)
    output:
        RAW_MUTATION_CATALOGUE
    shell:
        'wget -O {output} {params.url}'

rule download_cosmic_signatures:
    params:
        url='https://obj.umiacs.umd.edu/mutation-signature-explorer/signatures/COSMIC/processed/cosmic-signatures.SBS-96.tsv'
    output:
        COSMIC_SIGNATURES
    shell:
        'wget -O {output} {params.url}'
